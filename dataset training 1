from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os
img = image.load_img(r"C:\Users\Kaveesha Fernando\Desktop\baseData\trainning\tinea corporis\1.jpg")

plt.imshow(img)
cv2.imread(r"C:\Users\Kaveesha Fernando\Desktop\baseData\trainning\tinea capitis\1.jpg").shape
train = ImageDataGenerator (rescale = 1/255)
validation = ImageDataGenerator (rescale = 1/255)

testing_dataset = train.flow_from_directory( r'C:\Users\Kaveesha Fernando\Desktop\baseData\trainning',
target_size=(200,200),
batch_size = 3,
class_mode = 'binary' )

validation_dataset = validation.flow_from_directory( r'C:\Users\Kaveesha Fernando\Desktop\baseData\validation',
target_size=(200,200),
batch_size = 3,

class_mode = 'binary' )
model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3),activation = "relu",input_shape=(200,200,3)),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(32,(3,3),activation = "relu"),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(64,(3,3),activation = "relu"),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    ##
                                    tf.keras.layers.Flatten(),
                                    ##
                                    tf.keras.layers.Dense(512,activation = "relu"),
                                    ##
                                    tf.keras.layers.Dense(1,activation = "sigmoid")])

model.compile(loss='binary_crossentropy',
  optimizer=tf.keras.optimizers.RMSprop(lr=0.001),
  metrics=['acc'])

    model_fit = model.fit(testing_dataset,
                      steps_per_epoch = 3,
                      epochs = 10,
                      validation_data = validation_dataset) 
          
